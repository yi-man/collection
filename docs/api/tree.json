{
  "type": "root",
  "children": [
    {
      "name": "mobile-angular-ui",
      "description": "This is the main angular module of `mobile-angular-ui` framework.\n\nBy requiring this module you will have all 'mobile-angular-ui.core'\nand `mobile-angular-ui.components` features required as well.",
      "ngdoc": "module",
      "type": "module",
      "src": "src/js/mobile-angular-ui.js",
      "children": [
        {
          "name": "core",
          "description": "It has all the core functionalities of Mobile Angular UI. It aims to act as a common base \nfor an UI framework providing services and directives to create components and implement \nUI interactions with angular.\n\n<div class=\"alert alert-success\">\n  <b>NOTE</b>\n  <ul>\n    <li>It hasÂ no dependency on Bootstrap.</li>\n    <li>It is not related to mobile apps only.</li>\n    <li>It is not requiring CSS support.</li>\n    <li><b>You can use it on any Angular Application and with any CSS framework.</b></li>\n  </ul>\n</div>\n\n## Standalone Usage\n\nAlthough `.core` module is required by `mobile-angular-ui` by default you can use it alone.\n\n```\nangular.module('myApp', ['mobile-angular-ui.core']);\n```",
          "ngdoc": "module",
          "type": "module",
          "src": "src/js/mobile-angular-ui.core.js",
          "children": [
            {
              "name": "sharedState",
              "description": "`SharedState` aims to provide a proper way to create directives and components that previously used scope variables to communicate.\n\n`mobile-angular-ui.core.sharedState` is expose the homonymous service `SharedState` and a group of directives to access it.\n\neg.\n\n``` js\napp.controller('controller1', function($scope, SharedState){\n  SharedState.initialize($scope, 'myId');\n});\n\napp.controller('controller2', function(SharedState){\n  SharedState.toggle('myId');\n});\n```\n\nData structures retaining statuses will stay outside angular scopes thus they are not evaluated against digest cycle until its necessary. Also although statuses are sort of global variables `SharedState` will take care of disposing them when no scopes are requiring them anymore.\n\nA set of `ui-*` directives are available to interact with `SharedState` module and will hopefully let you spare your controllers and your time for something that is more meaningful than this:\n\n``` js\n$scope.activeTab = 1;\n\n$scope.setActiveTab = function(n) {\n  $scope.activeTab = n;\n};\n```\n\n## Usage\n\nDeclare it as a dependency to your app unless you have already included some of its super-modules.\n\n```\nangular.module('myApp', ['mobile-angular-ui.core.sharedState']);\n```\n\nUse `ui-state` directive to require/initialize a state from the target element scope\n\nExample: Tabs\n\n``` html\n\n<div class=\"tabs\" ui-state=\"activeTab\">\n\n  <ul class=\"nav nav-tabs\">\n    <li ui-class=\"{'active': activeTab == 1)}\">\n      <a ui-set=\"{'activeTab': 1}\">Tab 1</a>\n    </li>\n    <li ui-class=\"{'active': activeTab == 2)}\">\n      <a ui-set=\"{'activeTab': 2}\">Tab 2</a>\n    </li>\n    <li ui-class=\"{'active': activeTab == 3)}\">\n      <a ui-set=\"{'activeTab': 3}\">Tab 3</a>\n    </li>\n  </ul>\n\n  <div ui-if=\"activeTab == 1\">\n    Tab 1\n  </div>\n\n  <div ui-if=\"activeTab == 2\">\n    Tab 2\n  </div>\n\n  <div ui-if=\"activeTab == 3\">\n    Tab 3\n  </div>\n\n</div>\n```\n\nNOTE: `ui-toggle/set/turnOn/turnOff` responds to `click/tap` without stopping propagation so you can use them along with ng-click too. You can also change events to respond to with `ui-triggers` attribute.\n\nAny `SharedState` method is exposed through `Ui` object in `$rootScope`. So you could always do `ng-click=\"Ui.turnOn('myVar')\"`.\n\nSince `SharedState` is a service you can initialize/set statuses through controllers too:\n\n``` js\napp.controller('myController', function($scope, SharedState){\n  SharedState.initialize($scope, \"activeTab\", 3);\n});\n```\n\nAs well as you can use `ui-default` for that: \n\n``` html\n<div class=\"tabs\" ui-state=\"activeTab\" ui-default=\"thisIsAnExpression(5 + 1 - 2)\"></div>\n```",
              "ngdoc": "module",
              "type": "module",
              "src": "src/js/core/sharedState.js",
              "children": [
                {
                  "name": "SharedState",
                  "description": "A `SharedState` state can be considered as a global variable identified by an `id`.\n\n`SharedState` service exposes methods to interact with statuses to create, read and update states. \n\nIt acts as a BUS between UI elements to share UI related state that is automatically disposed when all scopes requiring it are destroyed.\n\neg.\n\n``` js\napp.controller('controller1', function($scope, SharedState){\n  SharedState.initialize($scope, 'myId');\n});\n\napp.controller('controller2', function(SharedState){\n  SharedState.toggle('myId');\n});\n```\n\nData structures retaining statuses will stay outside angular scopes thus they are not evaluated against digest cycle until its necessary. Also although statuses are sort of global variables `SharedState` will take care of disposing them when no scopes are requiring them anymore.\n\nA set of `ui-*` directives are available to interact with `SharedState` module and will hopefully let you spare your controllers and your time for something that is more meaningful than this:\n\n``` js\n$scope.activeTab = 1;\n\n$scope.setActiveTab = function(n) {\n  $scope.activeTab = n;\n};\n```",
                  "ngdoc": "service",
                  "type": "class",
                  "src": "src/js/core/sharedState.js",
                  "children": [
                    {
                      "name": "mobile-angular-ui.state.initialized.ID",
                      "description": "Broadcasted on `$rootScope` when `#initialize` is called for a new state not referenced by any scope currently.",
                      "params": [
                        {
                          "type": "any",
                          "description": "The value with which this state has been initialized",
                          "name": "currentValue"
                        }
                      ],
                      "type": "event",
                      "src": "src/js/core/sharedState.js",
                      "children": [],
                      "parent": "[Circular ~.children.0.children.0.children.0.children.0]",
                      "module": "mobile-angular-ui.core.sharedState",
                      "fullname": "mobile-angular-ui.state.initialized.ID",
                      "path": "mobile-angular-ui/core/sharedState/SharedState#event:mobile-angular-ui.state.initialized.ID"
                    },
                    {
                      "name": "mobile-angular-ui.state.destroyed.ID",
                      "description": "Broadcasted on `$rootScope` when a state is destroyed.",
                      "type": "event",
                      "src": "src/js/core/sharedState.js",
                      "children": [],
                      "parent": "[Circular ~.children.0.children.0.children.0.children.0]",
                      "module": "mobile-angular-ui.core.sharedState",
                      "fullname": "mobile-angular-ui.state.destroyed.ID",
                      "path": "mobile-angular-ui/core/sharedState/SharedState#event:mobile-angular-ui.state.destroyed.ID"
                    },
                    {
                      "name": "mobile-angular-ui.state.changed.ID",
                      "description": "Broadcasted on `$rootScope` the value of a state changes.\n\n``` js\n$scope.$on(`mobile-angular-ui.state.changed.uiSidebarLeft`, function(e, newVal, oldVal) {\n  if (newVal === true) {\n    console.log('sidebar opened');\n  } else {\n    console.log('sidebar closed');\n  }\n});",
                      "params": [
                        {
                          "type": "any",
                          "name": "newValue"
                        },
                        {
                          "type": "any",
                          "name": "oldValue"
                        }
                      ],
                      "type": "event",
                      "src": "src/js/core/sharedState.js",
                      "children": [],
                      "parent": "[Circular ~.children.0.children.0.children.0.children.0]",
                      "module": "mobile-angular-ui.core.sharedState",
                      "fullname": "mobile-angular-ui.state.changed.ID",
                      "path": "mobile-angular-ui/core/sharedState/SharedState#event:mobile-angular-ui.state.changed.ID"
                    },
                    {
                      "name": "initialize",
                      "description": "Initialize, or require if already intialized, a state identified by `id` within the provided `scope`, making it available to the rest of application.\n\nA `SharedState` is bound to one or more scopes. Each time `initialize` is called for an angular `scope` this will be bound to the `SharedState` and a reference count is incremented to allow garbage collection.\n\nReference count is decremented once the scope is destroyed. When the counter reach 0 the state will be disposed.",
                      "params": [
                        {
                          "type": "scope",
                          "description": "The scope to bound this state",
                          "name": "scope"
                        },
                        {
                          "type": "string",
                          "description": "The unique name of this state",
                          "name": "id"
                        },
                        {
                          "type": "object",
                          "optional": true,
                          "description": "Options",
                          "name": "options"
                        },
                        {
                          "type": "object",
                          "optional": true,
                          "description": "the initialization value, it is taken into account only if the state `id` is not already initialized",
                          "name": "options.defaultValue"
                        },
                        {
                          "type": "object",
                          "optional": true,
                          "description": "Specifies an exclusion group for the state. This means that for boolean operations (ie. toggle, turnOn, turnOf) when this state is set to `true`, any other state that is in the same `exclusionGroup` will be set to `false`.",
                          "name": "options.exclusionGroup"
                        }
                      ],
                      "type": "function",
                      "src": "src/js/core/sharedState.js",
                      "children": [],
                      "parent": "[Circular ~.children.0.children.0.children.0.children.0]",
                      "module": "mobile-angular-ui.core.sharedState",
                      "fullname": "initialize",
                      "path": "mobile-angular-ui/core/sharedState/SharedState#function:initialize"
                    },
                    {
                      "name": "setOne",
                      "description": "Set the value of the state identified by `id` to the `value` parameter.",
                      "params": [
                        {
                          "type": "string",
                          "description": "Unique identifier for state",
                          "name": "id"
                        },
                        {
                          "type": "any",
                          "description": "New value for this state",
                          "name": "value"
                        }
                      ],
                      "type": "function",
                      "src": "src/js/core/sharedState.js",
                      "children": [],
                      "parent": "[Circular ~.children.0.children.0.children.0.children.0]",
                      "module": "mobile-angular-ui.core.sharedState",
                      "fullname": "setOne",
                      "path": "mobile-angular-ui/core/sharedState/SharedState#function:setOne"
                    },
                    {
                      "name": "setMany",
                      "description": "Set multiple statuses at once. ie.\n\n```\nSharedState.setMany({ activeTab: 'firstTab', sidebarIn: false });\n```",
                      "params": [
                        {
                          "type": "object",
                          "description": "An object of the form {state1: value1, ..., stateN: valueN}",
                          "name": "object"
                        }
                      ],
                      "type": "function",
                      "src": "src/js/core/sharedState.js",
                      "children": [],
                      "parent": "[Circular ~.children.0.children.0.children.0.children.0]",
                      "module": "mobile-angular-ui.core.sharedState",
                      "fullname": "setMany",
                      "path": "mobile-angular-ui/core/sharedState/SharedState#function:setMany"
                    },
                    {
                      "name": "set",
                      "description": "A shorthand for both `setOne` and `setMany`.\nWhen called with only one parameter that is an object \nit is the same of `setMany`, otherwise is the \nsame of `setOne`.",
                      "params": [
                        {
                          "type": "string|object",
                          "description": "A state id or a <state,value> map object.",
                          "name": "idOrMap"
                        },
                        {
                          "type": "any",
                          "optional": true,
                          "description": "The value to assign in case idOrMap is a string.",
                          "name": "value"
                        }
                      ],
                      "type": "function",
                      "src": "src/js/core/sharedState.js",
                      "children": [],
                      "parent": "[Circular ~.children.0.children.0.children.0.children.0]",
                      "module": "mobile-angular-ui.core.sharedState",
                      "fullname": "set",
                      "path": "mobile-angular-ui/core/sharedState/SharedState#function:set"
                    },
                    {
                      "name": "turnOn",
                      "description": "Set shared state identified by `id` to `true`. If the shared state has been initialized with `exclusionGroup` option it will also turn off (set to `false`) all other statuses from the same exclusion group.",
                      "type": "function",
                      "src": "src/js/core/sharedState.js",
                      "children": [],
                      "parent": "[Circular ~.children.0.children.0.children.0.children.0]",
                      "module": "mobile-angular-ui.core.sharedState",
                      "fullname": "turnOn",
                      "path": "mobile-angular-ui/core/sharedState/SharedState#function:turnOn"
                    },
                    {
                      "name": "turnOff",
                      "description": "Set shared state identified by `id` to `false`.",
                      "type": "function",
                      "src": "src/js/core/sharedState.js",
                      "children": [],
                      "parent": "[Circular ~.children.0.children.0.children.0.children.0]",
                      "module": "mobile-angular-ui.core.sharedState",
                      "fullname": "turnOff",
                      "path": "mobile-angular-ui/core/sharedState/SharedState#function:turnOff"
                    },
                    {
                      "name": "toggle",
                      "description": "If current value for shared state identified by `id` evaluates to `true` it calls `turnOff` on it otherwise calls `turnOn`. Be aware that it will take into account `exclusionGroup` option. See `#turnOn` and `#initialize` for more.",
                      "type": "function",
                      "src": "src/js/core/sharedState.js",
                      "children": [],
                      "parent": "[Circular ~.children.0.children.0.children.0.children.0]",
                      "module": "mobile-angular-ui.core.sharedState",
                      "fullname": "toggle",
                      "path": "mobile-angular-ui/core/sharedState/SharedState#function:toggle"
                    },
                    {
                      "name": "get",
                      "description": "Returns the current value of the state identified by `id`.",
                      "type": "function",
                      "src": "src/js/core/sharedState.js",
                      "children": [],
                      "parent": "[Circular ~.children.0.children.0.children.0.children.0]",
                      "module": "mobile-angular-ui.core.sharedState",
                      "fullname": "get",
                      "path": "mobile-angular-ui/core/sharedState/SharedState#function:get"
                    },
                    {
                      "name": "isActive",
                      "description": "Return `true` if the boolean conversion of `#get(id)` evaluates to `true`.",
                      "type": "function",
                      "src": "src/js/core/sharedState.js",
                      "children": [],
                      "parent": "[Circular ~.children.0.children.0.children.0.children.0]",
                      "module": "mobile-angular-ui.core.sharedState",
                      "fullname": "isActive",
                      "path": "mobile-angular-ui/core/sharedState/SharedState#function:isActive"
                    },
                    {
                      "name": "active",
                      "alias": "mobile-angular-ui.core.sharedState~SharedState.isActive",
                      "description": "Alias for `#isActive`.",
                      "type": "function",
                      "src": "src/js/core/sharedState.js",
                      "children": [],
                      "parent": "[Circular ~.children.0.children.0.children.0.children.0]",
                      "module": "mobile-angular-ui.core.sharedState",
                      "fullname": "active",
                      "path": "mobile-angular-ui/core/sharedState/SharedState#function:active"
                    },
                    {
                      "name": "isUndefined",
                      "description": "Return `true` if state identified by `id` is not defined.",
                      "type": "function",
                      "src": "src/js/core/sharedState.js",
                      "children": [],
                      "parent": "[Circular ~.children.0.children.0.children.0.children.0]",
                      "module": "mobile-angular-ui.core.sharedState",
                      "fullname": "isUndefined",
                      "path": "mobile-angular-ui/core/sharedState/SharedState#function:isUndefined"
                    },
                    {
                      "name": "has",
                      "description": "Return `true` if state identified by `id` exsists.",
                      "type": "function",
                      "src": "src/js/core/sharedState.js",
                      "children": [],
                      "parent": "[Circular ~.children.0.children.0.children.0.children.0]",
                      "module": "mobile-angular-ui.core.sharedState",
                      "fullname": "has",
                      "path": "mobile-angular-ui/core/sharedState/SharedState#function:has"
                    },
                    {
                      "name": "referenceCount",
                      "type": "function",
                      "description": "",
                      "src": "src/js/core/sharedState.js",
                      "children": [],
                      "parent": "[Circular ~.children.0.children.0.children.0.children.0]",
                      "module": "mobile-angular-ui.core.sharedState",
                      "fullname": "referenceCount",
                      "path": "mobile-angular-ui/core/sharedState/SharedState#function:referenceCount"
                    },
                    {
                      "name": "equals",
                      "description": "Return `true` if `#get(id)` is exactly equal (`===`) to `value` param.",
                      "type": "function",
                      "src": "src/js/core/sharedState.js",
                      "children": [],
                      "parent": "[Circular ~.children.0.children.0.children.0.children.0]",
                      "module": "mobile-angular-ui.core.sharedState",
                      "fullname": "equals",
                      "path": "mobile-angular-ui/core/sharedState/SharedState#function:equals"
                    },
                    {
                      "name": "eq",
                      "alias": "mobile-angular-ui.core.sharedState~SharedState.equals",
                      "description": "Alias for `#equals`",
                      "type": "function",
                      "src": "src/js/core/sharedState.js",
                      "children": [],
                      "parent": "[Circular ~.children.0.children.0.children.0.children.0]",
                      "module": "mobile-angular-ui.core.sharedState",
                      "fullname": "eq",
                      "path": "mobile-angular-ui/core/sharedState/SharedState#function:eq"
                    },
                    {
                      "name": "values",
                      "alias": "mobile-angular-ui.core.sharedState~SharedState.equals",
                      "description": "Returns an object with all the status values currently stored. It has the form of `{statusId: statusValue}`.\n\nBear in mind that in order to spare resources it currently returns just the internal object retaining statuses values. Thus it is not intended to be modified and direct changes to it will be not tracked or notified.\n\nJust clone before apply any change to it.",
                      "type": "function",
                      "src": "src/js/core/sharedState.js",
                      "children": [],
                      "parent": "[Circular ~.children.0.children.0.children.0.children.0]",
                      "module": "mobile-angular-ui.core.sharedState",
                      "fullname": "values",
                      "path": "mobile-angular-ui/core/sharedState/SharedState#function:values"
                    }
                  ],
                  "parent": "[Circular ~.children.0.children.0.children.0]",
                  "module": "mobile-angular-ui.core.sharedState",
                  "fullname": "SharedState",
                  "path": "mobile-angular-ui/core/sharedState/service:SharedState"
                },
                {
                  "name": "uiState",
                  "description": "Calls `SharedState#initialize` on the scope relative to the element using it.",
                  "params": [
                    {
                      "type": "string",
                      "description": "The shared state id",
                      "name": "uiState"
                    },
                    {
                      "type": "expression",
                      "description": "the default value",
                      "name": "uiDefault"
                    }
                  ],
                  "ngdoc": "directive",
                  "type": "class",
                  "src": "src/js/core/sharedState.js",
                  "children": [],
                  "parent": "[Circular ~.children.0.children.0.children.0]",
                  "module": "mobile-angular-ui.core.sharedState",
                  "fullname": "uiState",
                  "path": "mobile-angular-ui/core/sharedState/directive:uiState"
                },
                {
                  "name": "uiToggle",
                  "description": "Calls `SharedState#toggle` when triggering events happens on the element using it.",
                  "params": [
                    {
                      "type": "object",
                      "description": "the target shared state",
                      "name": "uiToggle"
                    },
                    {
                      "type": "expression",
                      "description": "the default value",
                      "name": "uiDefault"
                    }
                  ],
                  "ngdoc": "directive",
                  "type": "class",
                  "src": "src/js/core/sharedState.js",
                  "children": [],
                  "parent": "[Circular ~.children.0.children.0.children.0]",
                  "module": "mobile-angular-ui.core.sharedState",
                  "fullname": "uiToggle",
                  "path": "mobile-angular-ui/core/sharedState/directive:uiToggle"
                },
                {
                  "name": "uiTurnOn",
                  "description": "Calls `SharedState#turnOn` when triggering events happens on the element using it.",
                  "params": [
                    {
                      "type": "object",
                      "description": "the target shared state",
                      "name": "uiTurnOn"
                    },
                    {
                      "type": "expression",
                      "description": "the default value",
                      "name": "uiDefault"
                    }
                  ],
                  "ngdoc": "directive",
                  "type": "class",
                  "src": "src/js/core/sharedState.js",
                  "children": [],
                  "parent": "[Circular ~.children.0.children.0.children.0]",
                  "module": "mobile-angular-ui.core.sharedState",
                  "fullname": "uiTurnOn",
                  "path": "mobile-angular-ui/core/sharedState/directive:uiTurnOn"
                },
                {
                  "name": "uiTurnOff",
                  "description": "Calls `SharedState#turnOff` when triggering events happens on the element using it.",
                  "params": [
                    {
                      "type": "object",
                      "description": "the target shared state",
                      "name": "uiTurnOff"
                    },
                    {
                      "type": "string",
                      "optional": true,
                      "description": "the event triggering the call. Defaults to `click tap`",
                      "name": "uiTriggers"
                    }
                  ],
                  "ngdoc": "directive",
                  "type": "class",
                  "src": "src/js/core/sharedState.js",
                  "children": [],
                  "parent": "[Circular ~.children.0.children.0.children.0]",
                  "module": "mobile-angular-ui.core.sharedState",
                  "fullname": "uiTurnOff",
                  "path": "mobile-angular-ui/core/sharedState/directive:uiTurnOff"
                },
                {
                  "name": "uiSet",
                  "description": "Calls `SharedState#set` when triggering events happens on the element using it.",
                  "params": [
                    {
                      "type": "object",
                      "description": "The object to pass to SharedState#set",
                      "name": "uiSet"
                    },
                    {
                      "type": "string",
                      "optional": true,
                      "description": "the event triggering the call. Defaults to `click tap`",
                      "name": "uiTriggers"
                    }
                  ],
                  "ngdoc": "directive",
                  "type": "class",
                  "src": "src/js/core/sharedState.js",
                  "children": [],
                  "parent": "[Circular ~.children.0.children.0.children.0]",
                  "module": "mobile-angular-ui.core.sharedState",
                  "fullname": "uiSet",
                  "path": "mobile-angular-ui/core/sharedState/directive:uiSet"
                },
                {
                  "name": "uiScopeContext",
                  "description": "`uiScopeContext` is not a directive, but a parameter common to any of the following `ui-*` directives.\n\nIt allows to use current scope vars inside ui-* conditions. That will leave other scope vars (or the entire scope if not present) apart from the condition evaluation process.\n\nHopefully this will keep evaluation running against a flat and small data structure instead of taking into account the whole scope. \n\nIt is a list `scopeVar[ as aliasName] [, ...]` specifing one of more scope variables to take into account when evaluating conditions. ie:\n\n``` html\n<!-- use item from ng-repeat -->\n<div ui-if=\"openPanel == i\" ui-scope-context='i' ng-repeat=\"i in [1,2,3]\">\n  <div class=\"panel-body\">\n    <!-- ... -->\n  </div>\n</div>\n```\n\n``` html\n<div ui-if=\"sharedState1 == myVar1 && sharedState2 == myVar2\"\n  ui-scope-context=\"myVar1, myVar2\"\n>\n</div>\n```\n\nBe aware that scope vars will take precedence over sharedStates so,\nin order to avoid name clashes you can use 'as' to refer to scope vars\nwith a different name in conditions:\n\n``` html\n<div ui-if=\"x == myVar1 && y == myVar2\"\n  ui-scope-context=\"x as myVar1, y as myVar2\"\n>\n</div>\n```",
                  "type": "member",
                  "src": "src/js/core/sharedState.js",
                  "children": [],
                  "parent": "[Circular ~.children.0.children.0.children.0]",
                  "module": "mobile-angular-ui.core.sharedState",
                  "fullname": "uiScopeContext",
                  "path": "mobile-angular-ui/core/sharedState#member:uiScopeContext"
                },
                {
                  "name": "uiIf",
                  "description": "Same as `ngIf` but evaluates condition against `SharedState` statuses too",
                  "params": [
                    {
                      "type": "expression",
                      "description": "A condition to decide wether to attach the element to the dom",
                      "name": "uiIf"
                    },
                    {
                      "type": "list",
                      "optional": true,
                      "description": "A list `scopeVar[ as aliasName] [, ...]` specifing one of more scope variables to take into account when evaluating condition.",
                      "name": "uiScopeContext"
                    }
                  ],
                  "ngdoc": "directive",
                  "type": "function",
                  "src": "src/js/core/sharedState.js",
                  "children": [],
                  "parent": "[Circular ~.children.0.children.0.children.0]",
                  "module": "mobile-angular-ui.core.sharedState",
                  "fullname": "uiIf",
                  "path": "mobile-angular-ui/core/sharedState/directive:uiIf"
                },
                {
                  "name": "uiHide",
                  "description": "Same as `ngHide` but evaluates condition against `SharedState` statuses",
                  "params": [
                    {
                      "type": "expression",
                      "description": "A condition to decide wether to hide the element",
                      "name": "uiShow"
                    },
                    {
                      "type": "list",
                      "optional": true,
                      "description": "A list `scopeVar[ as aliasName] [, ...]` specifing one of more scope variables to take into account when evaluating condition.",
                      "name": "uiScopeContext"
                    }
                  ],
                  "ngdoc": "directive",
                  "type": "function",
                  "src": "src/js/core/sharedState.js",
                  "children": [],
                  "parent": "[Circular ~.children.0.children.0.children.0]",
                  "module": "mobile-angular-ui.core.sharedState",
                  "fullname": "uiHide",
                  "path": "mobile-angular-ui/core/sharedState/directive:uiHide"
                },
                {
                  "name": "uiShow",
                  "description": "Same as `ngShow` but evaluates condition against `SharedState` statuses",
                  "params": [
                    {
                      "type": "expression",
                      "description": "A condition to decide wether to show the element",
                      "name": "uiShow"
                    },
                    {
                      "type": "list",
                      "optional": true,
                      "description": "A list `scopeVar[ as aliasName] [, ...]` specifing one of more scope variables to take into account when evaluating condition.",
                      "name": "uiScopeContext"
                    }
                  ],
                  "ngdoc": "directive",
                  "type": "function",
                  "src": "src/js/core/sharedState.js",
                  "children": [],
                  "parent": "[Circular ~.children.0.children.0.children.0]",
                  "module": "mobile-angular-ui.core.sharedState",
                  "fullname": "uiShow",
                  "path": "mobile-angular-ui/core/sharedState/directive:uiShow"
                },
                {
                  "name": "uiClass",
                  "description": "A simplified version of `ngClass` that evaluates in context of `SharedState`, it only suppors the `{'className': expr}` syntax.",
                  "params": [
                    {
                      "type": "expression",
                      "description": "An expression that has to evaluate to an object of the form `{'className': expr}`, where `expr` decides wether the class should appear to element's class list.",
                      "name": "uiClass"
                    },
                    {
                      "type": "list",
                      "optional": true,
                      "description": "A list `scopeVar[ as aliasName] [, ...]` specifing one of more scope variables to take into account when evaluating condition.",
                      "name": "uiScopeContext"
                    }
                  ],
                  "ngdoc": "directive",
                  "type": "function",
                  "src": "src/js/core/sharedState.js",
                  "children": [],
                  "parent": "[Circular ~.children.0.children.0.children.0]",
                  "module": "mobile-angular-ui.core.sharedState",
                  "fullname": "uiClass",
                  "path": "mobile-angular-ui/core/sharedState/directive:uiClass"
                }
              ],
              "parent": "[Circular ~.children.0.children.0]",
              "module": "mobile-angular-ui.core",
              "fullname": "mobile-angular-ui.core.sharedState",
              "path": "mobile-angular-ui/core/sharedState"
            }
          ],
          "parent": "[Circular ~.children.0]",
          "module": "mobile-angular-ui",
          "fullname": "mobile-angular-ui.core",
          "path": "mobile-angular-ui/core"
        }
      ],
      "parent": "[Circular ~]",
      "fullname": "mobile-angular-ui",
      "path": "/mobile-angular-ui"
    }
  ]
}